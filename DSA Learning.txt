1. Set matrix Zeroes
	
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int r = matrix.size();
        int c = matrix[0].size();
        for(int i = 0; i<r; i++){
            for(int j = 0; j<c; j++){
                if(matrix[i][j] == 0){
                    int r1 = i;
                    int c1 = j;
                    for(int row = 0; row<r; row++){
                        if(matrix[row][c1] == 0){
                            continue;
                        }
                        matrix[row][c1] = -11;
                    }
                    for(int col = 0; col < c; col++){
                        if(matrix[r1][col] == 0){
                            continue;
                        }
                        matrix[r1][col] = -11;
                    }
                }
            }
        }
        for(int i = 0; i<r; i++){
            for(int j = 0; j<c; j++){
                if(matrix[i][j] == -11){
                    matrix[i][j] = 0;
                }
            }
        }
    }
};
2. i) Pascal's Triangle I

Given an integer numRows, return the first numRows of Pascal's triangle.

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> r(numRows);
        for(int i = 0; i<numRows; i++){
            r[i].resize(i+1);
            r[i][0] = r[i][i] = 1;
            for(int j = 1; j<i; j++){
                r[i][j] = r[i-1][j-1] + r[i-1][j];
            }
        }
        return r;
    }
};

2. ii) Pascal's Triangle II

Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> r(rowIndex+1, 0);
        r[0] = 1;
        for(int i = 1; i<=rowIndex; i++){
            for(int j = i; j>=1; j--){
                r[j] = r[j] + r[j-1];
            }
        }
        return r;
    }
};

3. Next Permutation

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), i, j;
        for(i = n-2; i>=0; i--){
            if(nums[i] < nums[i+1]){
                break;
            }
        }
        if(i < 0){
            reverse(nums.begin(), nums.end());
        }
        else{
            for(j = n-1; j>i; j--){
                if(nums[j] > nums[i]){
                    break;
                }
            }
            swap(nums[j], nums[i]);
            reverse(nums.begin()+i+1, nums.end());
        }
    }
};